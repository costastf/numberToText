#!/usr/bin/env python
#-*- coding: UTF-8 -*-
# File: main.py
# Copyright (c) 2010 by None
#
# GNU General Public Licence (GPL)
# 
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA  02111-1307  USA
#
__author__  = 'Costas Tyfoxylos <costas.tyf@gmail.com>'
__docformat__ = 'plaintext'
__date__ = '25/06/2010'


import re

class numToText(): 
    def __init__(self):
        self.text = ''
        self.singleDigits = (u'μηδέν',u'ένα',u'δύο',u'τρία',u'τέσσερα',u'πέντε',u'έξι',u'επτά',u'οκτώ',u'εννέα')
        self.doubleDigits = (u'δέκα',u'έντεκα',u'δώδεκα')
        self.doubleDigitsplural = (u'τρείς',u'τέσσερις',u'μία')
        self.tenths = (u'δεκα',u'είκοσι',u'τριάντα',u'σαράντα',u'πενήντα',u'εξήντα',u'εβδομήντα',u'ογδόντα',u'εννενήντα')
        self.hundreds = (u'εκατό', u'διακόσια', u'τριακόσια',u'τετρακόσια',u'πεντακόσια',u'εξακόσια',u'επτακόσια',u'οκτακόσια',u'εννιακόσια')
        self.hundredsplural = (u'εκατόν',u'διακόσιες', u'τριακόσιες',u'τετρακόσιες',u'πεντακόσιες',u'εξακόσιες',u'επτακόσιες',u'οκτακόσιες',u'εννιακόσιες')
        self.thousands = (u'χίλια', u'χιλιάδες')
        self.millions = (u'εκατομμύριο', u'εκατομμύρια')
        self.billions = (u'δισεκατομμύριο', u'δισεκατομμύρια')
    def __twoDigits(self, number, thousands=None, hundredFlag=None):
         text = ''
         num = number.zfill(2)
         if num[-1] == '0' and num[-2] == '0':
             text = ''
         elif num[-2] == '0':
             if not thousands:
                 text = self.singleDigits[int(num[-1])]   
             else:
                 if hundredFlag and num[-1] == '1':
                     text = self.doubleDigitsplural[2]   
                 elif num[-1] == '3':
                     text = self.doubleDigitsplural[0]   
                 elif num[-1] == '4':
                     text = self.doubleDigitsplural[1]   
                 else:
                     text = self.singleDigits[int(num[-1])]   
         else:
             if num[-2] == '1' and num[-1] < '3':
                 text = self.doubleDigits[int(num[-1])]
             elif num[-2] == '1' and num[-1] == '3':
                 if thousands:
                     text = self.tenths[0] + self.doubleDigitsplural[0] 
                 else:
                     text = self.tenths[0] + self.singleDigits[int(num[-1])]
             elif num[-2] == '1' and num[-1] == '4':
                 if thousands:
                     text = self.tenths[0] + self.doubleDigitsplural[1] 
                 else:
                     text = self.tenths[0] + self.singleDigits[int(num[-1])]
             elif num[-2] == '1' and num[-1] > '4':
                 text = self.tenths[0] + self.singleDigits[int(num[-1])]
             elif num[-1] == '0' and num[-2] != '0':
                 text = self.tenths[int(num[-2])-1]
             elif num[-1] != '0' and num[-2] != '0':
                 if not thousands:
                     text = self.tenths[int(num[-2])-1] + ' ' + self.singleDigits[int(num[-1])]
                 else:
                     if num[-2] > '1' and num[-1] == '1':
                         text = self.tenths[int(num[-2])-1] + ' ' + self.doubleDigitsplural[2]
                     elif num[-1] == '3':
                         text = self.tenths[int(num[-2])-1] + ' ' + self.doubleDigitsplural[0] 
                     elif num[-1] == '4':
                         text = self.tenths[int(num[-2])-1] + ' ' + self.doubleDigitsplural[1] 
                     else:
                         text = self.tenths[int(num[-2])-1] + ' ' + self.singleDigits[int(num[-1])]
         return text
    def __threeDigits(self, number, thousands=None):
        three = ''
        num = number.zfill(3)
        if thousands:
            if num[-3] == '1':
                two = self.__twoDigits(num[-2:], thousands='True', hundredFlag='True')
            else:
                two = self.__twoDigits(num[-2:], thousands='True')
        else:
            two = self.__twoDigits(num[-2:])
        if not two and num[-3] == '0':
            three = ''
        elif not two and num[-3] != '0':
            if thousands:
                if num[-3] == '1':
                    three = self.hundreds[int(num[-3])-1]
                elif num[-3] > '1':
                    three = self.hundredsplural[int(num[-3])-1]
            else:
                three = self.hundreds[int(num[-3])-1]
        elif num[-3] == '0':
            three = two
        elif num[-3] == '1':
            three = self.hundredsplural[0]+ ' ' + two
        elif num[-3] > '1':
            if thousands:
                three = self.hundredsplural[int(num[-3])-1]+ ' ' + two
            else: 
                three = self.hundreds[int(num[-3])-1]+ ' ' + two
        return three
    def __sixDigits(self,number):
        six = ''
        num = number.zfill(6)
        lastthree = self.__threeDigits(num[-3:])
        firstthree = self.__threeDigits(num[:-3],thousands='True')
        if firstthree:
            if firstthree == u'ένα':
                six = self.thousands[0] + ' ' + lastthree
            else:
                six = firstthree + ' ' + self.thousands[1] + ' ' + lastthree
        else:    
            six = lastthree
        return six
    def __nineDigits(self,number):
        nine = ''
        num = str(number).zfill(9)
        lastsix = self.__sixDigits(num[-6:])      
        firstthree = self.__threeDigits(num[:-6])
        if firstthree:
            if firstthree == u'ένα':
                nine = firstthree + ' ' + self.millions[0] + ' ' + lastsix
            else:
                nine = firstthree + ' ' + self.millions[1] + ' ' + lastsix
        else:    
            nine = lastsix
        return nine
    def __twelveDigits(self,number):
        twelve = ''
        num = str(number).zfill(12)
        lastnine = self.__nineDigits(num[-9:])      
        firstthree = self.__threeDigits(num[:-9])
        if firstthree:
            if firstthree == 'ένα':
                twelve = firstthree + ' ' + self.billions[0] + ' ' + lastnine
            else:
                twelve = firstthree + ' ' + self.billions[1] + ' ' + lastnine
        else:    
            twelve = lastnine
        return twelve
    def getText(self, number):
        decimal = ''
        try:
            fullnumber = str(number).split(',')
            if len(fullnumber) > 2:
                text = (u'Παρακαλώ χρησιμοποιήστε το κόμμα για δεκαδικό.\n Δεν επιτρέπονται περισσότερα απο ένα κόμμα στον αριθμό.')
                return text
            integer = re.sub("\D", "", fullnumber[0])
            decimal = re.sub("\D", "", fullnumber[1])
        except:
            pass
        if len(integer) > 12:
            text = (u'Η εφαρμογή μπορεί να περιγράψει μέχρι αριθμούς δισεκατομμυρίου.')
            return text	  
        integer = self.__twelveDigits(integer)
        if len(decimal) == 1:
            decimal = str(decimal)+'0'
        decimal = self.__twoDigits(str(decimal)[:2])
        if not integer and not decimal:
            text = u'μηδέν'
        elif not integer:
            text = u'μηδέν' + ' ' + u'κόμμα' + ' ' + decimal     
        elif not decimal:
            text = integer
        else:
            text = integer + ' ' + u'κόμμα' + ' ' + decimal      
        return text


if __name__ == "__main__":
    app = wx.PySimpleApp()
    text = numToText()
    found=None
    while not found:
        number = wx.GetTextFromUser(u'Παρακαλώ εισάγετε τον αριθμό για μετατροπή.',u'Εισαγωγή αριθμού', "",None)
        if not number:
            raise SystemExit
        retCode = wx.MessageBox(u'Ο αριθμός είναι ο :\n' +text.getText(number), u'Αριθμός',wx.OK | wx.ICON_INFORMATION) 

